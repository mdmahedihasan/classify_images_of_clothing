# -*- coding: utf-8 -*-
"""classify_images_of_clothing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpW4Yd-1-eFTBhV_cNtvBhwiwC_UTG41
"""

# Helper libraries
import matplotlib.pyplot as plt
import numpy as np

# TensorFlow and tf.keras
import tensorflow as tf

fashion_mnist = tf.keras.datasets.fashion_mnist
(train_images, train_labels), (test_images,
                               test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

train_images = train_images / 255.0
test_images = test_images / 255.0

plt.figure(figsize=(10, 10))
for n in range(25):
    plt.subplot(5, 5, n + 1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[n])
    plt.xlabel(class_names[train_labels[n]])
plt.show()

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10)
])

model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss=tf.keras.losses.SparseCategoricalCrossentropy(
                  from_logits=True),
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=10)

test_loss, test_accuracy = model.evaluate(test_images, test_labels)

probability_model = tf.keras.Sequential([
    model,
    tf.keras.layers.Softmax()
])

predictions = probability_model.predict(test_images)


def plot_image(index, predictions_array, true_label, true_image):
    """Form a plot.

    @param index: index of the image
    @param predictions_array: array([[]], dtype=float32)
    @param true_label: array([], dtype=uint8)
    @param true_image: array([[[]]])
    """
    true_label, true_image = true_label[index], true_image[index]

    plt.grid(False)
    plt.xticks([])
    plt.yticks([])

    plt.imshow(true_image)

    predicted_label = np.argmax(predictions_array)

    if predicted_label == true_label:
        color = "green"
    else:
        color = "red"

    plt.xlabel("{} ({:2.2f}%) ({})".format(class_names[predicted_label],
                                           100 * np.max(predictions_array),
                                           class_names[true_label]),
               color=color)


def plot_value_array(index, predictions_array, true_label):
    """Form a plot.

    Args:
        index (int): index of image
        predictions_array (numpy.ndarray): array([[]], dtype=float32)
        true_label (numpy.ndarray): array([], dtype=uint8)
    """
    true_label = true_label[index]

    plt.grid()
    plt.xticks(range(10))
    plt.yticks([])
    plt.ylim([0, 1])
    this_plot = plt.bar(range(10), predictions_array)

    predicted_label = np.argmax(predictions_array)

    this_plot[predicted_label].set_color("red")
    this_plot[true_label].set_color("green")


i = 0
plt.figure()
plt.subplot(1, 2, 1)
plot_image(i, predictions[i], test_labels, test_images)
plt.subplot(1, 2, 2)
plot_value_array(i, predictions[i], test_labels)
plt.show()

i = 12
plt.figure()
plt.subplot(1, 2, 1)
plot_image(i, predictions[i], test_labels, test_images)
plt.subplot(1, 2, 2)
plot_value_array(i, predictions[i], test_labels)
plt.show()

plt.figure(figsize=(15, 13))
for i in range(15):
    plt.subplot(5, 6, 2 * i + 1)
    plot_image(i, predictions[i], test_labels, test_images)
    plt.subplot(5, 6, 2 * i + 2)
    plot_value_array(i, predictions[i], test_labels)
plt.tight_layout()
plt.show()

img = test_images[1]
img = np.expand_dims(img, axis=0)

predictions_single = probability_model.predict(img)

plot_value_array(1, predictions_single[0], test_labels)

_ = plt.xticks(range(10), class_names, rotation=90)
plt.show()
